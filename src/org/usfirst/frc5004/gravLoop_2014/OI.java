// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc5004.gravLoop_2014;
import org.usfirst.frc5004.gravLoop_2014.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick jDriveL;
    public Joystick jDriveR;
    public JoystickButton b2_rampUp;
    public JoystickButton b2_rampDown;
    public JoystickButton b3_bothFlip;
    public JoystickButton b4_leftFlip;
    public JoystickButton b5_rightFlip;
    public JoystickButton trig_clampClose;
    public JoystickButton b7_toggleThrottle;
    public Joystick jSecondary;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        jSecondary = new Joystick(3);
        
        trig_clampClose = new JoystickButton(jSecondary, 1);
        trig_clampClose.whileHeld(new ClampClose());
//        b5_rightFlip = new JoystickButton(jSecondary, 5);
//        b5_rightFlip.whenPressed(new FlipRight());
//        b4_leftFlip = new JoystickButton(jSecondary, 4);
//        b4_leftFlip.whenPressed(new FlipLeft());
//        b3_bothFlip = new JoystickButton(jSecondary, 3);
//        b3_bothFlip.whenPressed(new FlipBoth());
//        b7_toggleThrottle = new JoystickButton(jSecondary, 6);
//        b7_toggleThrottle.whenPressed(new ToggleThrottle());
        jDriveR = new Joystick(2);
        
        jDriveL = new Joystick(1);
        
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("Drive", new Drive());
        SmartDashboard.putData("ClampOpen", new ClampOpen());
        SmartDashboard.putData("ClampClose", new ClampClose());
//        SmartDashboard.putData("FlipLeft", new FlipLeft());
//        SmartDashboard.putData("FlipRight", new FlipRight());
//        SmartDashboard.putData("FlipBoth", new FlipBoth());
//        SmartDashboard.putData("FlipClose", new FlipClose());
        SmartDashboard.putData("AirPressure", new AirPressure());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJDriveL() {
        return jDriveL;
    }
    public Joystick getJDriveR() {
        return jDriveR;
    }
    public Joystick getJSecondary() {
        return jSecondary;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
